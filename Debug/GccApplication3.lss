
GccApplication3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000102  00800100  00000760  000007f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000760  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001a  00800202  00800202  000008f6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008f6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000928  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  00000968  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000bdd  00000000  00000000  000009e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007a1  00000000  00000000  000015c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000050f  00000000  00000000  00001d66  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000190  00000000  00000000  00002278  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000507  00000000  00000000  00002408  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000395  00000000  00000000  0000290f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00002ca4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 4a 02 	jmp	0x494	; 0x494 <__vector_7>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 0a 02 	jmp	0x414	; 0x414 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	12 e0       	ldi	r17, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e6       	ldi	r30, 0x60	; 96
  7c:	f7 e0       	ldi	r31, 0x07	; 7
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b2 e0       	ldi	r27, 0x02	; 2
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 31       	cpi	r26, 0x1C	; 28
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <main>
  9e:	0c 94 ae 03 	jmp	0x75c	; 0x75c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <processString>:
		// turn on CTC mode
		TCCR1B |= (1 << WGM12);
		// Set CS12, CS11 and CS10 bits for 1 prescaler
		TCCR1B |= (0 << CS12) | (0 << CS11) | (1 << CS10);
		// enable timer compare interrupt
		TIMSK1 |= (1 << OCIE1A);
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	ec 01       	movw	r28, r24
  ac:	89 e4       	ldi	r24, 0x49	; 73
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	0e 94 8d 02 	call	0x51a	; 0x51a <malloc>
  b4:	bc 01       	movw	r22, r24
  b6:	e8 81       	ld	r30, Y
  b8:	ee 23       	and	r30, r30
  ba:	01 f1       	breq	.+64     	; 0xfc <processString+0x56>
  bc:	21 96       	adiw	r28, 0x01	; 1
  be:	40 e0       	ldi	r20, 0x00	; 0
  c0:	50 e0       	ldi	r21, 0x00	; 0
  c2:	8f eb       	ldi	r24, 0xBF	; 191
  c4:	8e 0f       	add	r24, r30
  c6:	8a 31       	cpi	r24, 0x1A	; 26
  c8:	a8 f4       	brcc	.+42     	; 0xf4 <processString+0x4e>
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	ee 0f       	add	r30, r30
  ce:	ff 1f       	adc	r31, r31
  d0:	e2 57       	subi	r30, 0x72	; 114
  d2:	ff 4f       	sbci	r31, 0xFF	; 255
  d4:	01 90       	ld	r0, Z+
  d6:	f0 81       	ld	r31, Z
  d8:	e0 2d       	mov	r30, r0
  da:	db 01       	movw	r26, r22
  dc:	a4 0f       	add	r26, r20
  de:	b5 1f       	adc	r27, r21
  e0:	9f 01       	movw	r18, r30
  e2:	29 5f       	subi	r18, 0xF9	; 249
  e4:	3f 4f       	sbci	r19, 0xFF	; 255
  e6:	91 91       	ld	r25, Z+
  e8:	9d 93       	st	X+, r25
  ea:	2e 17       	cp	r18, r30
  ec:	3f 07       	cpc	r19, r31
  ee:	d9 f7       	brne	.-10     	; 0xe6 <processString+0x40>
  f0:	49 5f       	subi	r20, 0xF9	; 249
  f2:	5f 4f       	sbci	r21, 0xFF	; 255
  f4:	e9 91       	ld	r30, Y+
  f6:	e1 11       	cpse	r30, r1
  f8:	e4 cf       	rjmp	.-56     	; 0xc2 <processString+0x1c>
  fa:	02 c0       	rjmp	.+4      	; 0x100 <processString+0x5a>
  fc:	40 e0       	ldi	r20, 0x00	; 0
  fe:	50 e0       	ldi	r21, 0x00	; 0
 100:	50 93 13 02 	sts	0x0213, r21	; 0x800213 <max+0x1>
 104:	40 93 12 02 	sts	0x0212, r20	; 0x800212 <max>
 108:	fb 01       	movw	r30, r22
 10a:	e4 0f       	add	r30, r20
 10c:	f5 1f       	adc	r31, r21
 10e:	8a e0       	ldi	r24, 0x0A	; 10
 110:	80 83       	st	Z, r24
 112:	70 93 17 02 	sts	0x0217, r23	; 0x800217 <lista+0x1>
 116:	60 93 16 02 	sts	0x0216, r22	; 0x800216 <lista>
 11a:	df 91       	pop	r29
 11c:	cf 91       	pop	r28
 11e:	08 95       	ret

00000120 <int0_setup>:
 120:	51 98       	cbi	0x0a, 1	; 10
 122:	e9 e6       	ldi	r30, 0x69	; 105
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	10 82       	st	Z, r1
 128:	80 81       	ld	r24, Z
 12a:	81 60       	ori	r24, 0x01	; 1
 12c:	80 83       	st	Z, r24
 12e:	e8 9a       	sbi	0x1d, 0	; 29
 130:	08 95       	ret

00000132 <timer0_setup>:
 132:	14 bc       	out	0x24, r1	; 36
 134:	15 bc       	out	0x25, r1	; 37
 136:	16 bc       	out	0x26, r1	; 38
 138:	8f e9       	ldi	r24, 0x9F	; 159
 13a:	87 bd       	out	0x27, r24	; 39
 13c:	85 b5       	in	r24, 0x25	; 37
 13e:	82 60       	ori	r24, 0x02	; 2
 140:	85 bd       	out	0x25, r24	; 37
 142:	85 b5       	in	r24, 0x25	; 37
 144:	81 60       	ori	r24, 0x01	; 1
 146:	85 bd       	out	0x25, r24	; 37
 148:	08 95       	ret

0000014a <__vector_1>:
volatile unsigned int test_unghi_dorit = 0xFF;
volatile int ind = 0;
volatile unsigned int cinci_grade = 0xFF;


ISR(INT0_vect){
 14a:	1f 92       	push	r1
 14c:	0f 92       	push	r0
 14e:	0f b6       	in	r0, 0x3f	; 63
 150:	0f 92       	push	r0
 152:	11 24       	eor	r1, r1
 154:	2f 93       	push	r18
 156:	3f 93       	push	r19
 158:	4f 93       	push	r20
 15a:	6f 93       	push	r22
 15c:	7f 93       	push	r23
 15e:	8f 93       	push	r24
 160:	9f 93       	push	r25
 162:	af 93       	push	r26
 164:	bf 93       	push	r27
 166:	ef 93       	push	r30
 168:	ff 93       	push	r31
	count_timer0_interupts++;
 16a:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <count_timer0_interupts>
 16e:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <count_timer0_interupts+0x1>
 172:	01 96       	adiw	r24, 0x01	; 1
 174:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <count_timer0_interupts+0x1>
 178:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <count_timer0_interupts>
	switch(state)
 17c:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <state>
 180:	81 30       	cpi	r24, 0x01	; 1
 182:	09 f4       	brne	.+2      	; 0x186 <__vector_1+0x3c>
 184:	62 c0       	rjmp	.+196    	; 0x24a <__vector_1+0x100>
 186:	08 f4       	brcc	.+2      	; 0x18a <__vector_1+0x40>
 188:	71 c0       	rjmp	.+226    	; 0x26c <__vector_1+0x122>
 18a:	82 30       	cpi	r24, 0x02	; 2
 18c:	09 f0       	breq	.+2      	; 0x190 <__vector_1+0x46>
 18e:	76 c0       	rjmp	.+236    	; 0x27c <__vector_1+0x132>
	{
		case exec:
			if(count_timer0_interupts > sensorDelay)
 190:	20 91 06 02 	lds	r18, 0x0206	; 0x800206 <count_timer0_interupts>
 194:	30 91 07 02 	lds	r19, 0x0207	; 0x800207 <count_timer0_interupts+0x1>
 198:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <sensorDelay>
 19c:	90 91 15 02 	lds	r25, 0x0215	; 0x800215 <sensorDelay+0x1>
 1a0:	82 17       	cp	r24, r18
 1a2:	93 07       	cpc	r25, r19
 1a4:	08 f0       	brcs	.+2      	; 0x1a8 <__vector_1+0x5e>
 1a6:	6a c0       	rjmp	.+212    	; 0x27c <__vector_1+0x132>
			{
				if((toggle = !toggle))
 1a8:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <toggle>
 1ac:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <toggle+0x1>
 1b0:	21 e0       	ldi	r18, 0x01	; 1
 1b2:	30 e0       	ldi	r19, 0x00	; 0
 1b4:	00 97       	sbiw	r24, 0x00	; 0
 1b6:	11 f0       	breq	.+4      	; 0x1bc <__vector_1+0x72>
 1b8:	20 e0       	ldi	r18, 0x00	; 0
 1ba:	30 e0       	ldi	r19, 0x00	; 0
 1bc:	30 93 0b 01 	sts	0x010B, r19	; 0x80010b <toggle+0x1>
 1c0:	20 93 0a 01 	sts	0x010A, r18	; 0x80010a <toggle>
 1c4:	89 2b       	or	r24, r25
 1c6:	49 f4       	brne	.+18     	; 0x1da <__vector_1+0x90>
				{
					time_spend_high = count_timer0_interupts;
 1c8:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <count_timer0_interupts>
 1cc:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <count_timer0_interupts+0x1>
 1d0:	90 93 0f 02 	sts	0x020F, r25	; 0x80020f <time_spend_high+0x1>
 1d4:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <time_spend_high>
 1d8:	51 c0       	rjmp	.+162    	; 0x27c <__vector_1+0x132>
				}
				else
				{
					time_spend_low = count_timer0_interupts;
 1da:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <count_timer0_interupts>
 1de:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <count_timer0_interupts+0x1>
 1e2:	90 93 11 02 	sts	0x0211, r25	; 0x800211 <time_spend_low+0x1>
 1e6:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <time_spend_low>
					cinci_grade = (time_spend_low/72);
 1ea:	20 91 10 02 	lds	r18, 0x0210	; 0x800210 <time_spend_low>
 1ee:	30 91 11 02 	lds	r19, 0x0211	; 0x800211 <time_spend_low+0x1>
 1f2:	af e8       	ldi	r26, 0x8F	; 143
 1f4:	b3 ee       	ldi	r27, 0xE3	; 227
 1f6:	0e 94 7e 02 	call	0x4fc	; 0x4fc <__umulhisi3>
 1fa:	00 24       	eor	r0, r0
 1fc:	88 0f       	add	r24, r24
 1fe:	99 1f       	adc	r25, r25
 200:	00 1c       	adc	r0, r0
 202:	88 0f       	add	r24, r24
 204:	99 1f       	adc	r25, r25
 206:	00 1c       	adc	r0, r0
 208:	89 2f       	mov	r24, r25
 20a:	90 2d       	mov	r25, r0
 20c:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <cinci_grade+0x1>
 210:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <cinci_grade>
					ungiActual = cinci_grade;
 214:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <cinci_grade>
 218:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <cinci_grade+0x1>
 21c:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <ungiActual+0x1>
 220:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <ungiActual>
					ungiDorit = cinci_grade*36;
 224:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <cinci_grade>
 228:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <cinci_grade+0x1>
 22c:	44 e2       	ldi	r20, 0x24	; 36
 22e:	42 9f       	mul	r20, r18
 230:	c0 01       	movw	r24, r0
 232:	43 9f       	mul	r20, r19
 234:	90 0d       	add	r25, r0
 236:	11 24       	eor	r1, r1
 238:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <ungiDorit+0x1>
 23c:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <ungiDorit>
					ind = 0;
 240:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <__data_end+0x1>
 244:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <__data_end>
 248:	19 c0       	rjmp	.+50     	; 0x27c <__vector_1+0x132>
					
				}
			}
			break;
		case calib:
			sensorDelay = count_timer0_interupts*3;
 24a:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <count_timer0_interupts>
 24e:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <count_timer0_interupts+0x1>
 252:	9c 01       	movw	r18, r24
 254:	22 0f       	add	r18, r18
 256:	33 1f       	adc	r19, r19
 258:	82 0f       	add	r24, r18
 25a:	93 1f       	adc	r25, r19
 25c:	90 93 15 02 	sts	0x0215, r25	; 0x800215 <sensorDelay+0x1>
 260:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <sensorDelay>
			state = exec;
 264:	82 e0       	ldi	r24, 0x02	; 2
 266:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <state>
			break;
 26a:	08 c0       	rjmp	.+16     	; 0x27c <__vector_1+0x132>
		case init:
			TIMSK0 |= (1 << OCIE0A);
 26c:	ee e6       	ldi	r30, 0x6E	; 110
 26e:	f0 e0       	ldi	r31, 0x00	; 0
 270:	80 81       	ld	r24, Z
 272:	82 60       	ori	r24, 0x02	; 2
 274:	80 83       	st	Z, r24
			state = calib;
 276:	81 e0       	ldi	r24, 0x01	; 1
 278:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <state>
			break;
	}
	//cuvant = count_int0_interrupts;
	count_timer0_interupts = 0;
 27c:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <count_timer0_interupts+0x1>
 280:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <count_timer0_interupts>

}
 284:	ff 91       	pop	r31
 286:	ef 91       	pop	r30
 288:	bf 91       	pop	r27
 28a:	af 91       	pop	r26
 28c:	9f 91       	pop	r25
 28e:	8f 91       	pop	r24
 290:	7f 91       	pop	r23
 292:	6f 91       	pop	r22
 294:	4f 91       	pop	r20
 296:	3f 91       	pop	r19
 298:	2f 91       	pop	r18
 29a:	0f 90       	pop	r0
 29c:	0f be       	out	0x3f, r0	; 63
 29e:	0f 90       	pop	r0
 2a0:	1f 90       	pop	r1
 2a2:	18 95       	reti

000002a4 <__vector_14>:


ISR(TIMER0_COMPA_vect){
 2a4:	1f 92       	push	r1
 2a6:	0f 92       	push	r0
 2a8:	0f b6       	in	r0, 0x3f	; 63
 2aa:	0f 92       	push	r0
 2ac:	11 24       	eor	r1, r1
 2ae:	2f 93       	push	r18
 2b0:	3f 93       	push	r19
 2b2:	8f 93       	push	r24
 2b4:	9f 93       	push	r25
 2b6:	ef 93       	push	r30
 2b8:	ff 93       	push	r31
	++count_timer0_interupts;
 2ba:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <count_timer0_interupts>
 2be:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <count_timer0_interupts+0x1>
 2c2:	01 96       	adiw	r24, 0x01	; 1
 2c4:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <count_timer0_interupts+0x1>
 2c8:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <count_timer0_interupts>
	if(count_timer0_interupts == ungiActual)
 2cc:	20 91 06 02 	lds	r18, 0x0206	; 0x800206 <count_timer0_interupts>
 2d0:	30 91 07 02 	lds	r19, 0x0207	; 0x800207 <count_timer0_interupts+0x1>
 2d4:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <ungiActual>
 2d8:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <ungiActual+0x1>
 2dc:	28 17       	cp	r18, r24
 2de:	39 07       	cpc	r19, r25
 2e0:	09 f0       	breq	.+2      	; 0x2e4 <__vector_14+0x40>
 2e2:	8b c0       	rjmp	.+278    	; 0x3fa <__vector_14+0x156>
	{
		if(ungiActual == ungiDorit)
 2e4:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <ungiActual>
 2e8:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <ungiActual+0x1>
 2ec:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <ungiDorit>
 2f0:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <ungiDorit+0x1>
 2f4:	28 17       	cp	r18, r24
 2f6:	39 07       	cpc	r19, r25
 2f8:	09 f0       	breq	.+2      	; 0x2fc <__vector_14+0x58>
 2fa:	70 c0       	rjmp	.+224    	; 0x3dc <__vector_14+0x138>
		{
			if(ind < 7)
 2fc:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <__data_end>
 300:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <__data_end+0x1>
 304:	07 97       	sbiw	r24, 0x07	; 7
 306:	94 f4       	brge	.+36     	; 0x32c <__vector_14+0x88>
			{
				cuvant = M[ind++];
 308:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <__data_end>
 30c:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <__data_end+0x1>
 310:	9c 01       	movw	r18, r24
 312:	2f 5f       	subi	r18, 0xFF	; 255
 314:	3f 4f       	sbci	r19, 0xFF	; 255
 316:	30 93 03 02 	sts	0x0203, r19	; 0x800203 <__data_end+0x1>
 31a:	20 93 02 02 	sts	0x0202, r18	; 0x800202 <__data_end>
 31e:	fc 01       	movw	r30, r24
 320:	e1 56       	subi	r30, 0x61	; 97
 322:	fe 4f       	sbci	r31, 0xFE	; 254
 324:	80 81       	ld	r24, Z
 326:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <cuvant>
 32a:	4a c0       	rjmp	.+148    	; 0x3c0 <__vector_14+0x11c>
			}
			else
			{
				if(ind < 14)
 32c:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <__data_end>
 330:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <__data_end+0x1>
 334:	0e 97       	sbiw	r24, 0x0e	; 14
 336:	9c f4       	brge	.+38     	; 0x35e <__vector_14+0xba>
				{
					cuvant = U[ind-7];
 338:	e0 91 02 02 	lds	r30, 0x0202	; 0x800202 <__data_end>
 33c:	f0 91 03 02 	lds	r31, 0x0203	; 0x800203 <__data_end+0x1>
 340:	e0 5a       	subi	r30, 0xA0	; 160
 342:	fe 4f       	sbci	r31, 0xFE	; 254
 344:	80 81       	ld	r24, Z
 346:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <cuvant>
					++ind;
 34a:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <__data_end>
 34e:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <__data_end+0x1>
 352:	01 96       	adiw	r24, 0x01	; 1
 354:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <__data_end+0x1>
 358:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <__data_end>
 35c:	31 c0       	rjmp	.+98     	; 0x3c0 <__vector_14+0x11c>
				}
				else
					if(ind < 21)
 35e:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <__data_end>
 362:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <__data_end+0x1>
 366:	45 97       	sbiw	r24, 0x15	; 21
 368:	9c f4       	brge	.+38     	; 0x390 <__vector_14+0xec>
					{
						cuvant = I[ind-14];
 36a:	e0 91 02 02 	lds	r30, 0x0202	; 0x800202 <__data_end>
 36e:	f0 91 03 02 	lds	r31, 0x0203	; 0x800203 <__data_end+0x1>
 372:	e3 55       	subi	r30, 0x53	; 83
 374:	fe 4f       	sbci	r31, 0xFE	; 254
 376:	80 81       	ld	r24, Z
 378:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <cuvant>
						++ind;
 37c:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <__data_end>
 380:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <__data_end+0x1>
 384:	01 96       	adiw	r24, 0x01	; 1
 386:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <__data_end+0x1>
 38a:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <__data_end>
 38e:	18 c0       	rjmp	.+48     	; 0x3c0 <__vector_14+0x11c>
					}
					else
						if(ind < 28)
 390:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <__data_end>
 394:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <__data_end+0x1>
 398:	4c 97       	sbiw	r24, 0x1c	; 28
 39a:	94 f4       	brge	.+36     	; 0x3c0 <__vector_14+0x11c>
						{
							cuvant = E[ind-21];
 39c:	e0 91 02 02 	lds	r30, 0x0202	; 0x800202 <__data_end>
 3a0:	f0 91 03 02 	lds	r31, 0x0203	; 0x800203 <__data_end+0x1>
 3a4:	ee 53       	subi	r30, 0x3E	; 62
 3a6:	fe 4f       	sbci	r31, 0xFE	; 254
 3a8:	80 81       	ld	r24, Z
 3aa:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <cuvant>
							++ind;
 3ae:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <__data_end>
 3b2:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <__data_end+0x1>
 3b6:	01 96       	adiw	r24, 0x01	; 1
 3b8:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <__data_end+0x1>
 3bc:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <__data_end>
						}
			}
			ungiDorit += cinci_grade;
 3c0:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <cinci_grade>
 3c4:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <cinci_grade+0x1>
 3c8:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <ungiDorit>
 3cc:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <ungiDorit+0x1>
 3d0:	82 0f       	add	r24, r18
 3d2:	93 1f       	adc	r25, r19
 3d4:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <ungiDorit+0x1>
 3d8:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <ungiDorit>
		}
		ungiActual += cinci_grade;
 3dc:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <cinci_grade>
 3e0:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <cinci_grade+0x1>
 3e4:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <ungiActual>
 3e8:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <ungiActual+0x1>
 3ec:	82 0f       	add	r24, r18
 3ee:	93 1f       	adc	r25, r19
 3f0:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <ungiActual+0x1>
 3f4:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <ungiActual>
 3f8:	02 c0       	rjmp	.+4      	; 0x3fe <__vector_14+0x15a>
		
		
	}
	else
	{
		cuvant = 0;
 3fa:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <cuvant>
	}
	
}
 3fe:	ff 91       	pop	r31
 400:	ef 91       	pop	r30
 402:	9f 91       	pop	r25
 404:	8f 91       	pop	r24
 406:	3f 91       	pop	r19
 408:	2f 91       	pop	r18
 40a:	0f 90       	pop	r0
 40c:	0f be       	out	0x3f, r0	; 63
 40e:	0f 90       	pop	r0
 410:	1f 90       	pop	r1
 412:	18 95       	reti

00000414 <__vector_11>:

ISR(TIMER1_COMPA_vect){
 414:	1f 92       	push	r1
 416:	0f 92       	push	r0
 418:	0f b6       	in	r0, 0x3f	; 63
 41a:	0f 92       	push	r0
 41c:	11 24       	eor	r1, r1
 41e:	2f 93       	push	r18
 420:	3f 93       	push	r19
 422:	8f 93       	push	r24
 424:	9f 93       	push	r25
	if(++count_timer1_interupts == perioada_dintre_litere)
 426:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <count_timer1_interupts>
 42a:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <count_timer1_interupts+0x1>
 42e:	01 96       	adiw	r24, 0x01	; 1
 430:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <count_timer1_interupts+0x1>
 434:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <count_timer1_interupts>
 438:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <perioada_dintre_litere>
 43c:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <perioada_dintre_litere+0x1>
 440:	82 17       	cp	r24, r18
 442:	93 07       	cpc	r25, r19
 444:	69 f4       	brne	.+26     	; 0x460 <__vector_11+0x4c>
	{
		count_timer1_interupts = 0;
 446:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <count_timer1_interupts+0x1>
 44a:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <count_timer1_interupts>
		ungiActual++;
 44e:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <ungiActual>
 452:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <ungiActual+0x1>
 456:	01 96       	adiw	r24, 0x01	; 1
 458:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <ungiActual+0x1>
 45c:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <ungiActual>
	}
	if(ungiActual == ungiDorit)
 460:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <ungiActual>
 464:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <ungiActual+0x1>
 468:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <ungiDorit>
 46c:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <ungiDorit+0x1>
 470:	28 17       	cp	r18, r24
 472:	39 07       	cpc	r19, r25
 474:	21 f4       	brne	.+8      	; 0x47e <__vector_11+0x6a>
	{
		cuvant = 0xFF;
 476:	8f ef       	ldi	r24, 0xFF	; 255
 478:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <cuvant>
 47c:	02 c0       	rjmp	.+4      	; 0x482 <__vector_11+0x6e>
	}
	else
	{
		cuvant = 0;	
 47e:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <cuvant>
	}
}
 482:	9f 91       	pop	r25
 484:	8f 91       	pop	r24
 486:	3f 91       	pop	r19
 488:	2f 91       	pop	r18
 48a:	0f 90       	pop	r0
 48c:	0f be       	out	0x3f, r0	; 63
 48e:	0f 90       	pop	r0
 490:	1f 90       	pop	r1
 492:	18 95       	reti

00000494 <__vector_7>:

ISR(TIMER2_COMPA_vect){
 494:	1f 92       	push	r1
 496:	0f 92       	push	r0
 498:	0f b6       	in	r0, 0x3f	; 63
 49a:	0f 92       	push	r0
 49c:	11 24       	eor	r1, r1
 49e:	8f 93       	push	r24
 4a0:	9f 93       	push	r25
	++count_timer1_interupts;
 4a2:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <count_timer1_interupts>
 4a6:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <count_timer1_interupts+0x1>
 4aa:	01 96       	adiw	r24, 0x01	; 1
 4ac:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <count_timer1_interupts+0x1>
 4b0:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <count_timer1_interupts>
	
}
 4b4:	9f 91       	pop	r25
 4b6:	8f 91       	pop	r24
 4b8:	0f 90       	pop	r0
 4ba:	0f be       	out	0x3f, r0	; 63
 4bc:	0f 90       	pop	r0
 4be:	1f 90       	pop	r1
 4c0:	18 95       	reti

000004c2 <scrie>:
#include "handlerFile.h"

volatile char cuvant = 0;

void scrie(char txt){
	PORTB = (txt >> 2);
 4c2:	98 2f       	mov	r25, r24
 4c4:	96 95       	lsr	r25
 4c6:	96 95       	lsr	r25
 4c8:	95 b9       	out	0x05, r25	; 5
	PORTD = (txt << 6);
 4ca:	82 95       	swap	r24
 4cc:	88 0f       	add	r24, r24
 4ce:	88 0f       	add	r24, r24
 4d0:	80 7c       	andi	r24, 0xC0	; 192
 4d2:	8b b9       	out	0x0b, r24	; 11
 4d4:	08 95       	ret

000004d6 <main>:
}

int main(void)
{
	cli();
 4d6:	f8 94       	cli
	DDRB = 0b00011111;
 4d8:	8f e1       	ldi	r24, 0x1F	; 31
 4da:	84 b9       	out	0x04, r24	; 4
	DDRD = 0b11000000;
 4dc:	80 ec       	ldi	r24, 0xC0	; 192
 4de:	8a b9       	out	0x0a, r24	; 10
	processString("TE IUBB");
 4e0:	8a ef       	ldi	r24, 0xFA	; 250
 4e2:	91 e0       	ldi	r25, 0x01	; 1
 4e4:	0e 94 53 00 	call	0xa6	; 0xa6 <processString>
	int0_setup();
 4e8:	0e 94 90 00 	call	0x120	; 0x120 <int0_setup>
	timer0_setup();
 4ec:	0e 94 99 00 	call	0x132	; 0x132 <timer0_setup>
//	timer2_setup();
//	timer1_setup();
	sei();
 4f0:	78 94       	sei
	while (1) {
		scrie(cuvant);
 4f2:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <cuvant>
 4f6:	0e 94 61 02 	call	0x4c2	; 0x4c2 <scrie>
 4fa:	fb cf       	rjmp	.-10     	; 0x4f2 <main+0x1c>

000004fc <__umulhisi3>:
 4fc:	a2 9f       	mul	r26, r18
 4fe:	b0 01       	movw	r22, r0
 500:	b3 9f       	mul	r27, r19
 502:	c0 01       	movw	r24, r0
 504:	a3 9f       	mul	r26, r19
 506:	70 0d       	add	r23, r0
 508:	81 1d       	adc	r24, r1
 50a:	11 24       	eor	r1, r1
 50c:	91 1d       	adc	r25, r1
 50e:	b2 9f       	mul	r27, r18
 510:	70 0d       	add	r23, r0
 512:	81 1d       	adc	r24, r1
 514:	11 24       	eor	r1, r1
 516:	91 1d       	adc	r25, r1
 518:	08 95       	ret

0000051a <malloc>:
 51a:	0f 93       	push	r16
 51c:	1f 93       	push	r17
 51e:	cf 93       	push	r28
 520:	df 93       	push	r29
 522:	82 30       	cpi	r24, 0x02	; 2
 524:	91 05       	cpc	r25, r1
 526:	10 f4       	brcc	.+4      	; 0x52c <malloc+0x12>
 528:	82 e0       	ldi	r24, 0x02	; 2
 52a:	90 e0       	ldi	r25, 0x00	; 0
 52c:	e0 91 1a 02 	lds	r30, 0x021A	; 0x80021a <__flp>
 530:	f0 91 1b 02 	lds	r31, 0x021B	; 0x80021b <__flp+0x1>
 534:	20 e0       	ldi	r18, 0x00	; 0
 536:	30 e0       	ldi	r19, 0x00	; 0
 538:	a0 e0       	ldi	r26, 0x00	; 0
 53a:	b0 e0       	ldi	r27, 0x00	; 0
 53c:	30 97       	sbiw	r30, 0x00	; 0
 53e:	19 f1       	breq	.+70     	; 0x586 <malloc+0x6c>
 540:	40 81       	ld	r20, Z
 542:	51 81       	ldd	r21, Z+1	; 0x01
 544:	02 81       	ldd	r16, Z+2	; 0x02
 546:	13 81       	ldd	r17, Z+3	; 0x03
 548:	48 17       	cp	r20, r24
 54a:	59 07       	cpc	r21, r25
 54c:	c8 f0       	brcs	.+50     	; 0x580 <malloc+0x66>
 54e:	84 17       	cp	r24, r20
 550:	95 07       	cpc	r25, r21
 552:	69 f4       	brne	.+26     	; 0x56e <malloc+0x54>
 554:	10 97       	sbiw	r26, 0x00	; 0
 556:	31 f0       	breq	.+12     	; 0x564 <malloc+0x4a>
 558:	12 96       	adiw	r26, 0x02	; 2
 55a:	0c 93       	st	X, r16
 55c:	12 97       	sbiw	r26, 0x02	; 2
 55e:	13 96       	adiw	r26, 0x03	; 3
 560:	1c 93       	st	X, r17
 562:	27 c0       	rjmp	.+78     	; 0x5b2 <malloc+0x98>
 564:	00 93 1a 02 	sts	0x021A, r16	; 0x80021a <__flp>
 568:	10 93 1b 02 	sts	0x021B, r17	; 0x80021b <__flp+0x1>
 56c:	22 c0       	rjmp	.+68     	; 0x5b2 <malloc+0x98>
 56e:	21 15       	cp	r18, r1
 570:	31 05       	cpc	r19, r1
 572:	19 f0       	breq	.+6      	; 0x57a <malloc+0x60>
 574:	42 17       	cp	r20, r18
 576:	53 07       	cpc	r21, r19
 578:	18 f4       	brcc	.+6      	; 0x580 <malloc+0x66>
 57a:	9a 01       	movw	r18, r20
 57c:	bd 01       	movw	r22, r26
 57e:	ef 01       	movw	r28, r30
 580:	df 01       	movw	r26, r30
 582:	f8 01       	movw	r30, r16
 584:	db cf       	rjmp	.-74     	; 0x53c <malloc+0x22>
 586:	21 15       	cp	r18, r1
 588:	31 05       	cpc	r19, r1
 58a:	f9 f0       	breq	.+62     	; 0x5ca <malloc+0xb0>
 58c:	28 1b       	sub	r18, r24
 58e:	39 0b       	sbc	r19, r25
 590:	24 30       	cpi	r18, 0x04	; 4
 592:	31 05       	cpc	r19, r1
 594:	80 f4       	brcc	.+32     	; 0x5b6 <malloc+0x9c>
 596:	8a 81       	ldd	r24, Y+2	; 0x02
 598:	9b 81       	ldd	r25, Y+3	; 0x03
 59a:	61 15       	cp	r22, r1
 59c:	71 05       	cpc	r23, r1
 59e:	21 f0       	breq	.+8      	; 0x5a8 <malloc+0x8e>
 5a0:	fb 01       	movw	r30, r22
 5a2:	93 83       	std	Z+3, r25	; 0x03
 5a4:	82 83       	std	Z+2, r24	; 0x02
 5a6:	04 c0       	rjmp	.+8      	; 0x5b0 <malloc+0x96>
 5a8:	90 93 1b 02 	sts	0x021B, r25	; 0x80021b <__flp+0x1>
 5ac:	80 93 1a 02 	sts	0x021A, r24	; 0x80021a <__flp>
 5b0:	fe 01       	movw	r30, r28
 5b2:	32 96       	adiw	r30, 0x02	; 2
 5b4:	44 c0       	rjmp	.+136    	; 0x63e <malloc+0x124>
 5b6:	fe 01       	movw	r30, r28
 5b8:	e2 0f       	add	r30, r18
 5ba:	f3 1f       	adc	r31, r19
 5bc:	81 93       	st	Z+, r24
 5be:	91 93       	st	Z+, r25
 5c0:	22 50       	subi	r18, 0x02	; 2
 5c2:	31 09       	sbc	r19, r1
 5c4:	39 83       	std	Y+1, r19	; 0x01
 5c6:	28 83       	st	Y, r18
 5c8:	3a c0       	rjmp	.+116    	; 0x63e <malloc+0x124>
 5ca:	20 91 18 02 	lds	r18, 0x0218	; 0x800218 <__brkval>
 5ce:	30 91 19 02 	lds	r19, 0x0219	; 0x800219 <__brkval+0x1>
 5d2:	23 2b       	or	r18, r19
 5d4:	41 f4       	brne	.+16     	; 0x5e6 <malloc+0xcc>
 5d6:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 5da:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 5de:	30 93 19 02 	sts	0x0219, r19	; 0x800219 <__brkval+0x1>
 5e2:	20 93 18 02 	sts	0x0218, r18	; 0x800218 <__brkval>
 5e6:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 5ea:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 5ee:	21 15       	cp	r18, r1
 5f0:	31 05       	cpc	r19, r1
 5f2:	41 f4       	brne	.+16     	; 0x604 <malloc+0xea>
 5f4:	2d b7       	in	r18, 0x3d	; 61
 5f6:	3e b7       	in	r19, 0x3e	; 62
 5f8:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 5fc:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 600:	24 1b       	sub	r18, r20
 602:	35 0b       	sbc	r19, r21
 604:	e0 91 18 02 	lds	r30, 0x0218	; 0x800218 <__brkval>
 608:	f0 91 19 02 	lds	r31, 0x0219	; 0x800219 <__brkval+0x1>
 60c:	e2 17       	cp	r30, r18
 60e:	f3 07       	cpc	r31, r19
 610:	a0 f4       	brcc	.+40     	; 0x63a <malloc+0x120>
 612:	2e 1b       	sub	r18, r30
 614:	3f 0b       	sbc	r19, r31
 616:	28 17       	cp	r18, r24
 618:	39 07       	cpc	r19, r25
 61a:	78 f0       	brcs	.+30     	; 0x63a <malloc+0x120>
 61c:	ac 01       	movw	r20, r24
 61e:	4e 5f       	subi	r20, 0xFE	; 254
 620:	5f 4f       	sbci	r21, 0xFF	; 255
 622:	24 17       	cp	r18, r20
 624:	35 07       	cpc	r19, r21
 626:	48 f0       	brcs	.+18     	; 0x63a <malloc+0x120>
 628:	4e 0f       	add	r20, r30
 62a:	5f 1f       	adc	r21, r31
 62c:	50 93 19 02 	sts	0x0219, r21	; 0x800219 <__brkval+0x1>
 630:	40 93 18 02 	sts	0x0218, r20	; 0x800218 <__brkval>
 634:	81 93       	st	Z+, r24
 636:	91 93       	st	Z+, r25
 638:	02 c0       	rjmp	.+4      	; 0x63e <malloc+0x124>
 63a:	e0 e0       	ldi	r30, 0x00	; 0
 63c:	f0 e0       	ldi	r31, 0x00	; 0
 63e:	cf 01       	movw	r24, r30
 640:	df 91       	pop	r29
 642:	cf 91       	pop	r28
 644:	1f 91       	pop	r17
 646:	0f 91       	pop	r16
 648:	08 95       	ret

0000064a <free>:
 64a:	cf 93       	push	r28
 64c:	df 93       	push	r29
 64e:	00 97       	sbiw	r24, 0x00	; 0
 650:	09 f4       	brne	.+2      	; 0x654 <free+0xa>
 652:	81 c0       	rjmp	.+258    	; 0x756 <free+0x10c>
 654:	fc 01       	movw	r30, r24
 656:	32 97       	sbiw	r30, 0x02	; 2
 658:	13 82       	std	Z+3, r1	; 0x03
 65a:	12 82       	std	Z+2, r1	; 0x02
 65c:	a0 91 1a 02 	lds	r26, 0x021A	; 0x80021a <__flp>
 660:	b0 91 1b 02 	lds	r27, 0x021B	; 0x80021b <__flp+0x1>
 664:	10 97       	sbiw	r26, 0x00	; 0
 666:	81 f4       	brne	.+32     	; 0x688 <free+0x3e>
 668:	20 81       	ld	r18, Z
 66a:	31 81       	ldd	r19, Z+1	; 0x01
 66c:	82 0f       	add	r24, r18
 66e:	93 1f       	adc	r25, r19
 670:	20 91 18 02 	lds	r18, 0x0218	; 0x800218 <__brkval>
 674:	30 91 19 02 	lds	r19, 0x0219	; 0x800219 <__brkval+0x1>
 678:	28 17       	cp	r18, r24
 67a:	39 07       	cpc	r19, r25
 67c:	51 f5       	brne	.+84     	; 0x6d2 <free+0x88>
 67e:	f0 93 19 02 	sts	0x0219, r31	; 0x800219 <__brkval+0x1>
 682:	e0 93 18 02 	sts	0x0218, r30	; 0x800218 <__brkval>
 686:	67 c0       	rjmp	.+206    	; 0x756 <free+0x10c>
 688:	ed 01       	movw	r28, r26
 68a:	20 e0       	ldi	r18, 0x00	; 0
 68c:	30 e0       	ldi	r19, 0x00	; 0
 68e:	ce 17       	cp	r28, r30
 690:	df 07       	cpc	r29, r31
 692:	40 f4       	brcc	.+16     	; 0x6a4 <free+0x5a>
 694:	4a 81       	ldd	r20, Y+2	; 0x02
 696:	5b 81       	ldd	r21, Y+3	; 0x03
 698:	9e 01       	movw	r18, r28
 69a:	41 15       	cp	r20, r1
 69c:	51 05       	cpc	r21, r1
 69e:	f1 f0       	breq	.+60     	; 0x6dc <free+0x92>
 6a0:	ea 01       	movw	r28, r20
 6a2:	f5 cf       	rjmp	.-22     	; 0x68e <free+0x44>
 6a4:	d3 83       	std	Z+3, r29	; 0x03
 6a6:	c2 83       	std	Z+2, r28	; 0x02
 6a8:	40 81       	ld	r20, Z
 6aa:	51 81       	ldd	r21, Z+1	; 0x01
 6ac:	84 0f       	add	r24, r20
 6ae:	95 1f       	adc	r25, r21
 6b0:	c8 17       	cp	r28, r24
 6b2:	d9 07       	cpc	r29, r25
 6b4:	59 f4       	brne	.+22     	; 0x6cc <free+0x82>
 6b6:	88 81       	ld	r24, Y
 6b8:	99 81       	ldd	r25, Y+1	; 0x01
 6ba:	84 0f       	add	r24, r20
 6bc:	95 1f       	adc	r25, r21
 6be:	02 96       	adiw	r24, 0x02	; 2
 6c0:	91 83       	std	Z+1, r25	; 0x01
 6c2:	80 83       	st	Z, r24
 6c4:	8a 81       	ldd	r24, Y+2	; 0x02
 6c6:	9b 81       	ldd	r25, Y+3	; 0x03
 6c8:	93 83       	std	Z+3, r25	; 0x03
 6ca:	82 83       	std	Z+2, r24	; 0x02
 6cc:	21 15       	cp	r18, r1
 6ce:	31 05       	cpc	r19, r1
 6d0:	29 f4       	brne	.+10     	; 0x6dc <free+0x92>
 6d2:	f0 93 1b 02 	sts	0x021B, r31	; 0x80021b <__flp+0x1>
 6d6:	e0 93 1a 02 	sts	0x021A, r30	; 0x80021a <__flp>
 6da:	3d c0       	rjmp	.+122    	; 0x756 <free+0x10c>
 6dc:	e9 01       	movw	r28, r18
 6de:	fb 83       	std	Y+3, r31	; 0x03
 6e0:	ea 83       	std	Y+2, r30	; 0x02
 6e2:	49 91       	ld	r20, Y+
 6e4:	59 91       	ld	r21, Y+
 6e6:	c4 0f       	add	r28, r20
 6e8:	d5 1f       	adc	r29, r21
 6ea:	ec 17       	cp	r30, r28
 6ec:	fd 07       	cpc	r31, r29
 6ee:	61 f4       	brne	.+24     	; 0x708 <free+0xbe>
 6f0:	80 81       	ld	r24, Z
 6f2:	91 81       	ldd	r25, Z+1	; 0x01
 6f4:	84 0f       	add	r24, r20
 6f6:	95 1f       	adc	r25, r21
 6f8:	02 96       	adiw	r24, 0x02	; 2
 6fa:	e9 01       	movw	r28, r18
 6fc:	99 83       	std	Y+1, r25	; 0x01
 6fe:	88 83       	st	Y, r24
 700:	82 81       	ldd	r24, Z+2	; 0x02
 702:	93 81       	ldd	r25, Z+3	; 0x03
 704:	9b 83       	std	Y+3, r25	; 0x03
 706:	8a 83       	std	Y+2, r24	; 0x02
 708:	e0 e0       	ldi	r30, 0x00	; 0
 70a:	f0 e0       	ldi	r31, 0x00	; 0
 70c:	12 96       	adiw	r26, 0x02	; 2
 70e:	8d 91       	ld	r24, X+
 710:	9c 91       	ld	r25, X
 712:	13 97       	sbiw	r26, 0x03	; 3
 714:	00 97       	sbiw	r24, 0x00	; 0
 716:	19 f0       	breq	.+6      	; 0x71e <free+0xd4>
 718:	fd 01       	movw	r30, r26
 71a:	dc 01       	movw	r26, r24
 71c:	f7 cf       	rjmp	.-18     	; 0x70c <free+0xc2>
 71e:	8d 91       	ld	r24, X+
 720:	9c 91       	ld	r25, X
 722:	11 97       	sbiw	r26, 0x01	; 1
 724:	9d 01       	movw	r18, r26
 726:	2e 5f       	subi	r18, 0xFE	; 254
 728:	3f 4f       	sbci	r19, 0xFF	; 255
 72a:	82 0f       	add	r24, r18
 72c:	93 1f       	adc	r25, r19
 72e:	20 91 18 02 	lds	r18, 0x0218	; 0x800218 <__brkval>
 732:	30 91 19 02 	lds	r19, 0x0219	; 0x800219 <__brkval+0x1>
 736:	28 17       	cp	r18, r24
 738:	39 07       	cpc	r19, r25
 73a:	69 f4       	brne	.+26     	; 0x756 <free+0x10c>
 73c:	30 97       	sbiw	r30, 0x00	; 0
 73e:	29 f4       	brne	.+10     	; 0x74a <free+0x100>
 740:	10 92 1b 02 	sts	0x021B, r1	; 0x80021b <__flp+0x1>
 744:	10 92 1a 02 	sts	0x021A, r1	; 0x80021a <__flp>
 748:	02 c0       	rjmp	.+4      	; 0x74e <free+0x104>
 74a:	13 82       	std	Z+3, r1	; 0x03
 74c:	12 82       	std	Z+2, r1	; 0x02
 74e:	b0 93 19 02 	sts	0x0219, r27	; 0x800219 <__brkval+0x1>
 752:	a0 93 18 02 	sts	0x0218, r26	; 0x800218 <__brkval>
 756:	df 91       	pop	r29
 758:	cf 91       	pop	r28
 75a:	08 95       	ret

0000075c <_exit>:
 75c:	f8 94       	cli

0000075e <__stop_program>:
 75e:	ff cf       	rjmp	.-2      	; 0x75e <__stop_program>
